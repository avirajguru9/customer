openapi: 3.0.1
info:
  title: Customer Management API
  version: 1.0.0
  description: API for managing customer data with tier calculation
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /api/customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input
        '409':
          description: Customer with email already exists
    get:
      tags:
        - Customers
      summary: Get all customers
      responses:
        '200':
          description: List of customers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /api/customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    put:
      tags:
        - Customers
      summary: Update customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    delete:
      tags:
        - Customers
      summary: Delete customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found
  /api/customers/name/{name}:
    get:
      tags:
        - Customers
      summary: Get customer by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
  /api/customers/email/{email}:
    get:
      tags:
        - Customers
      summary: Get customer by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Auto-generated UUID
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        annualSpend:
          type: number
          format: double
          example: 1500.00
        lastPurchaseDate:
          type: string
          format: date-time
          nullable: true
        tier:
          type: string
          readOnly: true
          enum:
            - SILVER
            - GOLD
            - PLATINUM
      required:
        - name
        - email
        - annualSpend